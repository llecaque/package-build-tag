<project name="build tao tag" default="build" basedir=".">
	<property file="../build.properties" />
	<if>
		<not>
			<isset property="version" />
		</not>
		<then>
			<echo level="error" msg="parma $version is needed" />
		</then>
	</if>
	<target name="help">
		<echo msg ="Available Command : " />
		<exec executable="phing" passthru="true">
			<arg value="-l" />
		</exec>
	</target>

	<target name="clean">
		<delete dir="src" />
		<delete dir="build" />
	</target>
	<target name="prepare">
		<mkdir dir="src" />
		<mkdir dir="build" />
		<mkdir dir="backup" />
	</target>
	<resolvepath propertyName="src.dir.resolved" file="src" />

	<target name="clone" depends="clean,prepare"> 

		<gitclone repository="git@github.com:llecaque/package-tao.git" targetPath="src" />


		<composer command="install" composer="/usr/local/bin/composer">
			 <arg value="--working-dir" />
			 <arg path="${src.dir.resolved}" />
		</composer>
		<copy file="src/composer.json" tofile="backup/tao.json" overwrite="true"/>
	</target>

	<target name="package">
		<zip destfile="build/${release.source.name}.zip" prefix="${release.source.name}/">
			<fileset dir="src">
				<include name="**/**"/>
				<exclude name="*/test/" />
			</fileset>
		</zip>

	</target>
	<property name="extensions_list" value="        
		funcAcl,
        generisHard,
        ltiDeliveryProvider,
        ontoBrowser,
        tao,
        taoCampaign,
        taoCe,
        taoDelivery,
        taoDevTools,
        taoGroups,
        taoItems,
        taoLti,
        taoOpenWebItem,
        taoQtiItem,
        taoQtiTest,
        taoResultServer,
        taoResults,
        taoSimpleDelivery,
        taoSubjects,
        taoTests,
        taoWfAdvTest,
        taoWfTest,
        wfAuthoring,
        wfEngine" />

	<target name="tag">
		<foreach list="${extensions_list}" param="extension" target="tag_one" />
	</target>

	<target name="remove_tests">
		<foreach list="${extensions_list}" param="extension" target="remove_tests_one" />
	</target>

	<target name="remove_tests_one">
		<if>
  			<isset property="extension"/>
  			<then>
				<echo msg="remove test on ext ${extension}" />
				<delete dir="src/${extension}/test" />
			</then>
			<else>
	  			<echo level="error" msg="error try to call remove_tests_one alone" />
	  		</else>
	  	</if>
	</target>

	<target name="tag_one">
		<tstamp>
        	<format pattern="%H:%M:%S the %d/%m/%Y " property="build.time" />  
		</tstamp>
		<if>
  			<isset property="extension"/>
  			<then>
				<echo msg="tag ext ${extension} with version v${version}" />
				<gittag 
					repository="${src.dir.resolved}/${extension}" 
					name="v${version}" 
					message="Automatic creation of tag ${version} at ${build.time}"/>
				<gitpush
        			repository="${src.dir.resolved}/${extension}"
        			tags="true"
        			destination="origin" />
			</then>
	  		<else>
	  			<echo level="error" msg="error try to call tag_one alone" />
	  		</else>
	  	</if>
	</target>


	<target name="delete_tag">
		<foreach list="${extensions_list}" param="extension" target="delete_tag_one" />
	</target>


	<target name="delete_tag_one">
		<if>
  			<isset property="extension"/>
  			<then>
		  		<echo msg="delete tag v${version for ext ${extension}" />
		  		<gittag 
		  			repository="${src.dir.resolved}/${extension}" 
		  			name="v${version}" 
		  			delete="true"/>
		  		<exec 
		  			command="git reset --hard" 
		  			logoutput="true" 
		  			passthru="true" 
		  			dir="${src.dir.resolved}/${extension}" 
		  		/>
	  		</then>
	  		<else>
	  			<echo level="error" msg="error try to call delete_cd tag_one alone" />
	  		</else>
  		</if>
		
	</target>
	<target name="create_composer" description="Create release controller">
		<includepath classpath="task/composer" />
		<taskdef name="composerCreate" classname="ComposerCreateTask" />
		<move file="src/composer.json" tofile="src/tao.json" overwrite="true"/>
		<composerCreate 
			 composerTemplate="conf/composer.json"
			 taoPackage="src/tao.json"
			 outputDir="src"
			 version="${version}"
			/> 
	</target>

	<target name="restore_tao_package"> 
		<copy file="backup/tao.json" tofile="src/composer.json" overwrite="true"/>
	</target>

	<target name="build" depends="clone,create_composer,package" />
</project>